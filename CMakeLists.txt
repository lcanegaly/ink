set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

if( CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR )
  # We are building as stand-alone project
  cmake_minimum_required(VERSION 3.11.0)
  project(ink VERSION 0.0.1)
  set(BUILD_DEMOS "TRUE")
else()
  set(EXE_NAME "ink")
  set(BUILD_DEMOS "FALSE")
endif()

link_directories(${CMAKE_CURRENT_SOURCE_DIR}/dependencies/glew/lib)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/dependencies/glm/glm)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/dependencies/glfw/include)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/dependencies/miniaudio)
link_directories(${CMAKE_CURRENT_SOURCE_DIR}/dependencies/glfw/build/src)
link_directories(${CMAKE_CURRENT_SOURCE_DIR}/dependencies/glfw/build/Debug)

function(link_to_target)
  if (${CMAKE_SYSTEM_NAME} MATCHES "Windows")
    target_link_libraries(${EXE_NAME} shared_source_lib)
    target_link_libraries(${EXE_NAME} glfw3)
    target_link_libraries(${EXE_NAME} glew32)
    find_package(OpenGL REQUIRED)
    target_link_libraries(${EXE_NAME} OpenGL::GL)
  endif()
  if (${CMAKE_SYSTEM_NAME} MATCHES "Linux")
    target_link_libraries(${EXE_NAME} shared_source_lib)
    target_link_libraries(${EXE_NAME} libglfw3.a)
    target_link_libraries(${EXE_NAME} libGLEW.a)
    target_link_libraries(${EXE_NAME} libGL.so)
  endif()
  if (${CMAKE_SYSTEM_NAME} MATCHES "Emscripten")
    target_link_libraries(${EXE_NAME} shared_source_lib)
    set_target_properties(${EXE_NAME}PROPERTIES LINK_FLAGS 
      "-O3 -o out.html --shell-file shell_minimal.html -s USE_GLFW=3 \
      --preload-file assets/test.tga")
    set(CMAKE_EXECUTABLE_SUFFIX ".html")
  endif()
endfunction()

if (BUILD_DEMOS MATCHES "TRUE")
  set(LIB_NAME "shared_source_lib")
  add_library(shared_source_lib STATIC)
  set(EXE_NAME "mesh")
  add_executable(${EXE_NAME})
  add_subdirectory(src)
  add_subdirectory(example/mesh)
  link_to_target() 
  set(EXE_NAME "canvas")
  add_executable(${EXE_NAME})
  add_subdirectory(example/canvas)
  link_to_target() 
else()
  add_executable(${EXE_NAME})
  add_subdirectory(src)
endif()

set(CPACK_PROJECT_NAME ${EXE_NAME})
set(CPACK_PROJECT_VERSION ${PROJECT_VERSION})
include(CPack)
